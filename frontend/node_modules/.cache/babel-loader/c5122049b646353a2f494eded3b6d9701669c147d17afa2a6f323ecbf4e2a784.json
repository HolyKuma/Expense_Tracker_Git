{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programmieren_YT\\\\Expense_Tracker\\\\frontend\\\\src\\\\Components\\\\Chart\\\\Chart.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Chart as ChartJs, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport styled from 'styled-components';\nimport { useGlobalContext } from '../../context/globalContext';\nimport { dateFormat } from '../../utils/dateFormat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJs.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement);\nfunction Chart() {\n  _s();\n  const {\n    incomes,\n    expenses\n  } = useGlobalContext();\n  const sortedIncomes = [...incomes].sort((a, b) => new Date(a.date) - new Date(b.date));\n\n  // Sortiere die 'expenses' nach Datum\n  const sortedExpenses = [...expenses].sort((a, b) => new Date(a.date) - new Date(b.date));\n  const data = {\n    // Erstelle die Labels basierend auf den sortierten Incomes\n    labels: sortedIncomes.map(inc => {\n      const {\n        date\n      } = inc;\n      return dateFormat(date); // formatierte Daten, z.B. 'dd/mm/yyyy'\n    }),\n    datasets: [{\n      label: 'Income',\n      data: sortedIncomes.map(income => income.amount),\n      backgroundColor: 'green',\n      tension: .3\n    }, {\n      label: 'Expenses',\n      data: sortedExpenses.map(expense => expense.amount),\n      backgroundColor: 'red',\n      tension: .3\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(ChartStyled, {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n_s(Chart, \"FD0wmpS8gvIkX+imi80kDHo7xkc=\", false, function () {\n  return [useGlobalContext];\n});\n_c = Chart;\nconst ChartStyled = styled.div`\n    background: #FCF6F9;\n    border: 2px solid #FFFFFF;\n    box-shadow: 0px 1px 15px rgba(0, 0, 0, 0.06);\n    padding: 1rem;\n    border-radius: 20px;\n    height: 100%;\n`;\n_c2 = ChartStyled;\nexport default Chart;\nvar _c, _c2;\n$RefreshReg$(_c, \"Chart\");\n$RefreshReg$(_c2, \"ChartStyled\");","map":{"version":3,"names":["React","Chart","ChartJs","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","ArcElement","Line","styled","useGlobalContext","dateFormat","jsxDEV","_jsxDEV","register","_s","incomes","expenses","sortedIncomes","sort","a","b","Date","date","sortedExpenses","data","labels","map","inc","datasets","label","income","amount","backgroundColor","tension","expense","ChartStyled","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","div","_c2","$RefreshReg$"],"sources":["D:/Programmieren_YT/Expense_Tracker/frontend/src/Components/Chart/Chart.js"],"sourcesContent":["import React from 'react'\r\nimport {Chart as ChartJs, \r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    ArcElement,\r\n} from 'chart.js'\r\n\r\nimport {Line} from 'react-chartjs-2'\r\nimport styled from 'styled-components'\r\nimport { useGlobalContext } from '../../context/globalContext'\r\nimport { dateFormat } from '../../utils/dateFormat'\r\n\r\nChartJs.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    ArcElement,\r\n)\r\n\r\nfunction Chart() {\r\n    const {incomes, expenses} = useGlobalContext()\r\n\r\n    const sortedIncomes = [...incomes].sort((a, b) => new Date(a.date) - new Date(b.date));\r\n    \r\n    // Sortiere die 'expenses' nach Datum\r\n    const sortedExpenses = [...expenses].sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n    const data = {\r\n        // Erstelle die Labels basierend auf den sortierten Incomes\r\n        labels: sortedIncomes.map((inc) => {\r\n            const {date} = inc;\r\n            return dateFormat(date);  // formatierte Daten, z.B. 'dd/mm/yyyy'\r\n        }),\r\n        datasets: [\r\n            {\r\n                label: 'Income',\r\n                data: sortedIncomes.map((income) => income.amount),\r\n                backgroundColor: 'green',\r\n                tension: .3\r\n            },\r\n            {\r\n                label: 'Expenses',\r\n                data: sortedExpenses.map((expense) => expense.amount),\r\n                backgroundColor: 'red',\r\n                tension: .3\r\n            }\r\n        ]\r\n    };\r\n\r\n\r\n    return (\r\n        <ChartStyled >\r\n            <Line data={data} />\r\n        </ChartStyled>\r\n    )\r\n}\r\n\r\nconst ChartStyled = styled.div`\r\n    background: #FCF6F9;\r\n    border: 2px solid #FFFFFF;\r\n    box-shadow: 0px 1px 15px rgba(0, 0, 0, 0.06);\r\n    padding: 1rem;\r\n    border-radius: 20px;\r\n    height: 100%;\r\n`;\r\n\r\nexport default Chart"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,KAAK,IAAIC,OAAO,EACpBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,EACNC,UAAU,QACP,UAAU;AAEjB,SAAQC,IAAI,QAAO,iBAAiB;AACpC,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,gBAAgB,QAAQ,6BAA6B;AAC9D,SAASC,UAAU,QAAQ,wBAAwB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnDd,OAAO,CAACe,QAAQ,CACZd,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,EACNC,UACJ,CAAC;AAED,SAAST,KAAKA,CAAA,EAAG;EAAAiB,EAAA;EACb,MAAM;IAACC,OAAO;IAAEC;EAAQ,CAAC,GAAGP,gBAAgB,CAAC,CAAC;EAE9C,MAAMQ,aAAa,GAAG,CAAC,GAAGF,OAAO,CAAC,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACF,CAAC,CAACG,IAAI,CAAC,GAAG,IAAID,IAAI,CAACD,CAAC,CAACE,IAAI,CAAC,CAAC;;EAEtF;EACA,MAAMC,cAAc,GAAG,CAAC,GAAGP,QAAQ,CAAC,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACF,CAAC,CAACG,IAAI,CAAC,GAAG,IAAID,IAAI,CAACD,CAAC,CAACE,IAAI,CAAC,CAAC;EAExF,MAAME,IAAI,GAAG;IACT;IACAC,MAAM,EAAER,aAAa,CAACS,GAAG,CAAEC,GAAG,IAAK;MAC/B,MAAM;QAACL;MAAI,CAAC,GAAGK,GAAG;MAClB,OAAOjB,UAAU,CAACY,IAAI,CAAC,CAAC,CAAE;IAC9B,CAAC,CAAC;IACFM,QAAQ,EAAE,CACN;MACIC,KAAK,EAAE,QAAQ;MACfL,IAAI,EAAEP,aAAa,CAACS,GAAG,CAAEI,MAAM,IAAKA,MAAM,CAACC,MAAM,CAAC;MAClDC,eAAe,EAAE,OAAO;MACxBC,OAAO,EAAE;IACb,CAAC,EACD;MACIJ,KAAK,EAAE,UAAU;MACjBL,IAAI,EAAED,cAAc,CAACG,GAAG,CAAEQ,OAAO,IAAKA,OAAO,CAACH,MAAM,CAAC;MACrDC,eAAe,EAAE,KAAK;MACtBC,OAAO,EAAE;IACb,CAAC;EAET,CAAC;EAGD,oBACIrB,OAAA,CAACuB,WAAW;IAAAC,QAAA,eACRxB,OAAA,CAACL,IAAI;MAACiB,IAAI,EAAEA;IAAK;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEtB;AAAC1B,EAAA,CApCQjB,KAAK;EAAA,QACkBY,gBAAgB;AAAA;AAAAgC,EAAA,GADvC5C,KAAK;AAsCd,MAAMsC,WAAW,GAAG3B,MAAM,CAACkC,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAPIR,WAAW;AASjB,eAAetC,KAAK;AAAA,IAAA4C,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}