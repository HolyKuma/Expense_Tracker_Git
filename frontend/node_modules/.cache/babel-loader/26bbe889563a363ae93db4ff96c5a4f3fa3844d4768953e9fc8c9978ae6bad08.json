{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programmieren_YT\\\\Expense_Tracker_YT\\\\frontend\\\\src\\\\Components\\\\Chart\\\\Chart.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Chart as ChartJs, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport styled from 'styled-components';\nimport { useGlobalContext } from '../../context/globalContext';\nimport { dateFormat } from '../../utils/dateFormat';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJs.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement);\nfunction Chart() {\n  _s();\n  const {\n    incomes,\n    expenses\n  } = useGlobalContext();\n  const [viewMode, setViewMode] = useState('currentMonth'); // Zustand für die Auswahl der Ansicht\n\n  // Aktuelles Datum\n  const currentDate = moment();\n\n  // Funktion, um das Jahr und den Monat (YYYY-MM) zu extrahieren\n  const getYearMonth = date => moment(date).format('YYYY-MM');\n\n  // Funktion, um den Monatsnamen zu extrahieren\n  const getMonthName = date => moment(date).format('MMMM');\n\n  // Funktion, um das Datum im Format \"DD.MM\" zu erhalten\n  const getDay = date => moment(date).format('DD.MM');\n\n  // Daten für den aktuellen Monat anzeigen\n  const showCurrentMonth = () => {\n    // Filtere alle Daten für den aktuellen Monat\n    const currentMonthDates = [...incomes, ...expenses].filter(entry => moment(entry.date).isSame(currentDate, 'month')).map(entry => dateFormat(entry.date));\n\n    // Erhalte einzigartige Datumswerte (Tage)\n    const uniqueDays = Array.from(new Set(currentMonthDates));\n    const incomeData = uniqueDays.map(day => {\n      const incomeEntries = incomes.filter(inc => dateFormat(inc.date) === day);\n      const totalIncome = incomeEntries.reduce((sum, income) => sum + income.amount, 0);\n      return totalIncome;\n    });\n    const expenseData = uniqueDays.map(day => {\n      const expenseEntries = expenses.filter(exp => dateFormat(exp.date) === day);\n      const totalExpense = expenseEntries.reduce((sum, expense) => sum + expense.amount, 0);\n      return totalExpense;\n    });\n    return {\n      labels: uniqueDays,\n      incomeData,\n      expenseData\n    };\n  };\n\n  // Daten für das gesamte Jahr anzeigen\n  const showFullYear = () => {\n    // Gruppiere nach Jahr und Monat für das gesamte Jahr\n    const allYearMonths = [...incomes, ...expenses].map(entry => getYearMonth(entry.date)).sort(); // Sortiere nach Jahr und Monat (YYYY-MM)\n\n    // Erhalte einzigartige Jahr-Monat Kombinationen\n    const uniqueYearMonths = Array.from(new Set(allYearMonths));\n\n    // Extrahiere nur die Monatsnamen für die x-Achse, sortiert nach Jahr\n    const uniqueMonths = uniqueYearMonths.map(date => getMonthName(date));\n    const incomeData = uniqueYearMonths.map(yearMonth => {\n      const incomeEntries = incomes.filter(inc => getYearMonth(inc.date) === yearMonth);\n      const totalIncome = incomeEntries.reduce((sum, income) => sum + income.amount, 0);\n      return totalIncome;\n    });\n    const expenseData = uniqueYearMonths.map(yearMonth => {\n      const expenseEntries = expenses.filter(exp => getYearMonth(exp.date) === yearMonth);\n      const totalExpense = expenseEntries.reduce((sum, expense) => sum + expense.amount, 0);\n      return totalExpense;\n    });\n    return {\n      labels: uniqueMonths,\n      incomeData,\n      expenseData\n    };\n  };\n\n  // Wähle die anzuzeigenden Daten basierend auf der Auswahl des Nutzers\n  const {\n    labels,\n    incomeData,\n    expenseData\n  } = viewMode === 'currentMonth' ? showCurrentMonth() : showFullYear();\n  const data = {\n    labels,\n    // Labels für die x-Achse\n    datasets: [{\n      label: 'Income',\n      data: incomeData,\n      backgroundColor: 'green',\n      borderColor: 'green',\n      tension: 0.3,\n      fill: false\n    }, {\n      label: 'Expenses',\n      data: expenseData,\n      backgroundColor: 'red',\n      borderColor: 'red',\n      tension: 0.3,\n      fill: false\n    }]\n  };\n  const options = {\n    scales: {\n      x: {\n        type: 'category',\n        // Standard x-Achse, um konsistente Kategorien darzustellen\n        title: {\n          display: true,\n          text: viewMode === 'currentMonth' ? 'Day' : 'Month'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Amount'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ChartStyled, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode('currentMonth'),\n        children: \"Aktueller Monat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode('fullYear'),\n        children: \"Ganzes Jahr\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 9\n  }, this);\n}\n_s(Chart, \"2LyO4N7PDDXhyAjdH96+uLZRWUI=\", false, function () {\n  return [useGlobalContext];\n});\n_c = Chart;\nconst ChartStyled = styled.div`\n    background: #FCF6F9;\n    border: 2px solid #FFFFFF;\n    box-shadow: 0px 1px 15px rgba(0, 0, 0, 0.06);\n    padding: 1rem;\n    border-radius: 20px;\n    height: 100%;\n`;\n_c2 = ChartStyled;\nexport default Chart;\nvar _c, _c2;\n$RefreshReg$(_c, \"Chart\");\n$RefreshReg$(_c2, \"ChartStyled\");","map":{"version":3,"names":["React","useState","Chart","ChartJs","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","ArcElement","Line","styled","useGlobalContext","dateFormat","moment","jsxDEV","_jsxDEV","register","_s","incomes","expenses","viewMode","setViewMode","currentDate","getYearMonth","date","format","getMonthName","getDay","showCurrentMonth","currentMonthDates","filter","entry","isSame","map","uniqueDays","Array","from","Set","incomeData","day","incomeEntries","inc","totalIncome","reduce","sum","income","amount","expenseData","expenseEntries","exp","totalExpense","expense","labels","showFullYear","allYearMonths","sort","uniqueYearMonths","uniqueMonths","yearMonth","data","datasets","label","backgroundColor","borderColor","tension","fill","options","scales","x","type","title","display","text","y","ChartStyled","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","div","_c2","$RefreshReg$"],"sources":["D:/Programmieren_YT/Expense_Tracker_YT/frontend/src/Components/Chart/Chart.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n    Chart as ChartJs,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    ArcElement,\r\n} from 'chart.js';\r\n\r\nimport { Line } from 'react-chartjs-2';\r\nimport styled from 'styled-components';\r\nimport { useGlobalContext } from '../../context/globalContext';\r\nimport { dateFormat } from '../../utils/dateFormat';\r\nimport moment from 'moment';\r\n\r\nChartJs.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    ArcElement,\r\n);\r\n\r\nfunction Chart() {\r\n    const { incomes, expenses } = useGlobalContext();\r\n    const [viewMode, setViewMode] = useState('currentMonth'); // Zustand für die Auswahl der Ansicht\r\n\r\n    // Aktuelles Datum\r\n    const currentDate = moment();\r\n\r\n    // Funktion, um das Jahr und den Monat (YYYY-MM) zu extrahieren\r\n    const getYearMonth = (date) => moment(date).format('YYYY-MM');\r\n    \r\n    // Funktion, um den Monatsnamen zu extrahieren\r\n    const getMonthName = (date) => moment(date).format('MMMM');\r\n\r\n    // Funktion, um das Datum im Format \"DD.MM\" zu erhalten\r\n    const getDay = (date) => moment(date).format('DD.MM');\r\n\r\n    // Daten für den aktuellen Monat anzeigen\r\n    const showCurrentMonth = () => {\r\n        // Filtere alle Daten für den aktuellen Monat\r\n        const currentMonthDates = [...incomes, ...expenses]\r\n            .filter(entry => moment(entry.date).isSame(currentDate, 'month'))\r\n            .map(entry => dateFormat(entry.date));\r\n\r\n        // Erhalte einzigartige Datumswerte (Tage)\r\n        const uniqueDays = Array.from(new Set(currentMonthDates));\r\n\r\n        const incomeData = uniqueDays.map(day => {\r\n            const incomeEntries = incomes.filter(inc => dateFormat(inc.date) === day);\r\n            const totalIncome = incomeEntries.reduce((sum, income) => sum + income.amount, 0);\r\n            return totalIncome;\r\n        });\r\n\r\n        const expenseData = uniqueDays.map(day => {\r\n            const expenseEntries = expenses.filter(exp => dateFormat(exp.date) === day);\r\n            const totalExpense = expenseEntries.reduce((sum, expense) => sum + expense.amount, 0);\r\n            return totalExpense;\r\n        });\r\n\r\n        return {\r\n            labels: uniqueDays,\r\n            incomeData,\r\n            expenseData\r\n        };\r\n    };\r\n\r\n    // Daten für das gesamte Jahr anzeigen\r\n    const showFullYear = () => {\r\n        // Gruppiere nach Jahr und Monat für das gesamte Jahr\r\n        const allYearMonths = [...incomes, ...expenses]\r\n            .map(entry => getYearMonth(entry.date))\r\n            .sort(); // Sortiere nach Jahr und Monat (YYYY-MM)\r\n\r\n        // Erhalte einzigartige Jahr-Monat Kombinationen\r\n        const uniqueYearMonths = Array.from(new Set(allYearMonths));\r\n\r\n        // Extrahiere nur die Monatsnamen für die x-Achse, sortiert nach Jahr\r\n        const uniqueMonths = uniqueYearMonths.map(date => getMonthName(date));\r\n\r\n        const incomeData = uniqueYearMonths.map(yearMonth => {\r\n            const incomeEntries = incomes.filter(inc => getYearMonth(inc.date) === yearMonth);\r\n            const totalIncome = incomeEntries.reduce((sum, income) => sum + income.amount, 0);\r\n            return totalIncome;\r\n        });\r\n\r\n        const expenseData = uniqueYearMonths.map(yearMonth => {\r\n            const expenseEntries = expenses.filter(exp => getYearMonth(exp.date) === yearMonth);\r\n            const totalExpense = expenseEntries.reduce((sum, expense) => sum + expense.amount, 0);\r\n            return totalExpense;\r\n        });\r\n\r\n        return {\r\n            labels: uniqueMonths,\r\n            incomeData,\r\n            expenseData\r\n        };\r\n    };\r\n\r\n    // Wähle die anzuzeigenden Daten basierend auf der Auswahl des Nutzers\r\n    const { labels, incomeData, expenseData } = viewMode === 'currentMonth' ? showCurrentMonth() : showFullYear();\r\n\r\n    const data = {\r\n        labels, // Labels für die x-Achse\r\n        datasets: [\r\n            {\r\n                label: 'Income',\r\n                data: incomeData,\r\n                backgroundColor: 'green',\r\n                borderColor: 'green',\r\n                tension: 0.3,\r\n                fill: false,\r\n            },\r\n            {\r\n                label: 'Expenses',\r\n                data: expenseData,\r\n                backgroundColor: 'red',\r\n                borderColor: 'red',\r\n                tension: 0.3,\r\n                fill: false,\r\n            }\r\n        ]\r\n    };\r\n\r\n    const options = {\r\n        scales: {\r\n            x: {\r\n                type: 'category', // Standard x-Achse, um konsistente Kategorien darzustellen\r\n                title: {\r\n                    display: true,\r\n                    text: viewMode === 'currentMonth' ? 'Day' : 'Month',\r\n                },\r\n            },\r\n            y: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Amount',\r\n                },\r\n            },\r\n        },\r\n    };\r\n\r\n    return (\r\n        <ChartStyled>\r\n            <div>\r\n                <button onClick={() => setViewMode('currentMonth')}>Aktueller Monat</button>\r\n                <button onClick={() => setViewMode('fullYear')}>Ganzes Jahr</button>\r\n            </div>\r\n            <Line data={data} options={options} />\r\n        </ChartStyled>\r\n    );\r\n}\r\n\r\nconst ChartStyled = styled.div`\r\n    background: #FCF6F9;\r\n    border: 2px solid #FFFFFF;\r\n    box-shadow: 0px 1px 15px rgba(0, 0, 0, 0.06);\r\n    padding: 1rem;\r\n    border-radius: 20px;\r\n    height: 100%;\r\n`;\r\n\r\nexport default Chart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}