{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programmieren_YT\\\\Expense_Tracker\\\\frontend\\\\src\\\\context\\\\globalContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useContext, useState } from \"react\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BASE_URL = \"http://localhost:5000/api/v1/\";\nconst GlobalContext = /*#__PURE__*/React.createContext();\nexport const GlobalProvider = ({\n  children\n}) => {\n  _s();\n  const [incomes, setIncomes] = useState([]);\n  const [expenses, setExpenses] = useState([]);\n  const [error, setError] = useState(null);\n\n  // Funktion zum Hinzufügen eines Einkommens\n  const addIncome = async income => {\n    const response = await axios.post(`${BASE_URL}add-income`, income).catch(err => {\n      setError(err.response.data.message);\n    });\n    getIncomes();\n  };\n\n  // Funktion zum Abrufen der Einkommen\n  const getIncomes = async () => {\n    const response = await axios.get(`${BASE_URL}get-incomes`);\n    setIncomes(response.data);\n    console.log(response.data);\n  };\n\n  // Funktion zum Löschen eines Einkommens\n  const deleteIncome = async id => {\n    const res = await axios.delete(`${BASE_URL}delete-income/${id}`);\n    getIncomes();\n  };\n\n  // Funktion zum Berechnen des gesamten Einkommens\n  const totalIncome = () => {\n    let totalIncome = 0;\n    incomes.forEach(income => {\n      totalIncome = totalIncome + income.amount;\n    });\n    return totalIncome;\n  };\n\n  // Funktion zum Wiederholen eines Einkommens\n  const repeatIncome = async id => {\n    try {\n      // Finde das Einkommen, das wiederholt werden soll\n      const incomeToRepeat = incomes.find(income => income._id === id);\n      if (!incomeToRepeat) {\n        setError(\"Einkommen nicht gefunden\");\n        return;\n      }\n\n      // Generiere eine neue ID für das geklonte Einkommen\n      const newId = generateNewId();\n\n      // Erstelle das geklonte Einkommen mit neuer ID\n      const repeatedIncome = {\n        ...incomeToRepeat,\n        // Kopiere alle Eigenschaften vom originalen Einkommen\n        _id: newId,\n        // Überschreibe die ID mit der neuen ID\n        date: new Date() // Optional: Setze das aktuelle Datum für das neue Einkommen\n      };\n\n      // Sende das geklonte Einkommen per POST an die API\n      await axios.post(`${BASE_URL}add-income`, repeatedIncome);\n\n      // Aktualisiere die Einkommen-Liste\n      getIncomes();\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || \"Ein Fehler ist aufgetreten\");\n    }\n  };\n\n  // Beispiel einer Funktion zur Generierung einer neuen ID\n  const generateNewId = () => {\n    // Eine einfache Möglichkeit, eine neue eindeutige ID zu generieren (z.B. UUID oder Zeitstempel)\n    return String(Date.now()); // Verwende z.B. einen Zeitstempel als neue ID\n  };\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      addIncome,\n      getIncomes,\n      incomes,\n      deleteIncome,\n      totalIncome,\n      repeatIncome,\n      // Neue Funktion in den Kontext exportieren\n      error,\n      setError\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n_s(GlobalProvider, \"tEtYkz3TSUkMCKA3FBENwBvPpJ4=\");\n_c = GlobalProvider;\nexport const useGlobalContext = () => {\n  _s2();\n  return useContext(GlobalContext);\n};\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"names":["React","useContext","useState","axios","jsxDEV","_jsxDEV","BASE_URL","GlobalContext","createContext","GlobalProvider","children","_s","incomes","setIncomes","expenses","setExpenses","error","setError","addIncome","income","response","post","catch","err","data","message","getIncomes","get","console","log","deleteIncome","id","res","delete","totalIncome","forEach","amount","repeatIncome","incomeToRepeat","find","_id","newId","generateNewId","repeatedIncome","date","Date","_err$response","_err$response$data","String","now","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGlobalContext","_s2","$RefreshReg$"],"sources":["D:/Programmieren_YT/Expense_Tracker/frontend/src/context/globalContext.js"],"sourcesContent":["import React, { useContext, useState } from \"react\";\r\nimport axios from 'axios';\r\n\r\nconst BASE_URL = \"http://localhost:5000/api/v1/\";\r\n\r\nconst GlobalContext = React.createContext();\r\n\r\nexport const GlobalProvider = ({ children }) => {\r\n    const [incomes, setIncomes] = useState([]);\r\n    const [expenses, setExpenses] = useState([]);\r\n    const [error, setError] = useState(null);\r\n\r\n    // Funktion zum Hinzufügen eines Einkommens\r\n    const addIncome = async (income) => {\r\n        const response = await axios.post(`${BASE_URL}add-income`, income)\r\n            .catch((err) => {\r\n                setError(err.response.data.message);\r\n            });\r\n        getIncomes();\r\n    };\r\n\r\n    // Funktion zum Abrufen der Einkommen\r\n    const getIncomes = async () => {\r\n        const response = await axios.get(`${BASE_URL}get-incomes`);\r\n        setIncomes(response.data);\r\n        console.log(response.data);\r\n    };\r\n\r\n    // Funktion zum Löschen eines Einkommens\r\n    const deleteIncome = async (id) => {\r\n        const res = await axios.delete(`${BASE_URL}delete-income/${id}`);\r\n        getIncomes();\r\n    };\r\n\r\n    // Funktion zum Berechnen des gesamten Einkommens\r\n    const totalIncome = () => {\r\n        let totalIncome = 0;\r\n        incomes.forEach((income) => {\r\n            totalIncome = totalIncome + income.amount;\r\n        });\r\n        return totalIncome;\r\n    };\r\n\r\n    // Funktion zum Wiederholen eines Einkommens\r\n    const repeatIncome = async (id) => {\r\n        try {\r\n            // Finde das Einkommen, das wiederholt werden soll\r\n            const incomeToRepeat = incomes.find(income => income._id === id);\r\n\r\n            if (!incomeToRepeat) {\r\n                setError(\"Einkommen nicht gefunden\");\r\n                return;\r\n            }\r\n\r\n            // Generiere eine neue ID für das geklonte Einkommen\r\n            const newId = generateNewId();\r\n\r\n            // Erstelle das geklonte Einkommen mit neuer ID\r\n            const repeatedIncome = {\r\n                ...incomeToRepeat,  // Kopiere alle Eigenschaften vom originalen Einkommen\r\n                _id: newId,         // Überschreibe die ID mit der neuen ID\r\n                date: new Date()    // Optional: Setze das aktuelle Datum für das neue Einkommen\r\n            };\r\n\r\n            // Sende das geklonte Einkommen per POST an die API\r\n            await axios.post(`${BASE_URL}add-income`, repeatedIncome);\r\n\r\n            // Aktualisiere die Einkommen-Liste\r\n            getIncomes();\r\n        } catch (err) {\r\n            setError(err.response?.data?.message || \"Ein Fehler ist aufgetreten\");\r\n        }\r\n    };\r\n\r\n    // Beispiel einer Funktion zur Generierung einer neuen ID\r\n    const generateNewId = () => {\r\n        // Eine einfache Möglichkeit, eine neue eindeutige ID zu generieren (z.B. UUID oder Zeitstempel)\r\n        return String(Date.now());  // Verwende z.B. einen Zeitstempel als neue ID\r\n    };\r\n\r\n    return (\r\n        <GlobalContext.Provider value={{\r\n            addIncome,\r\n            getIncomes,\r\n            incomes,\r\n            deleteIncome,\r\n            totalIncome,\r\n            repeatIncome,  // Neue Funktion in den Kontext exportieren\r\n            error,\r\n            setError\r\n        }}>\r\n            {children}\r\n        </GlobalContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useGlobalContext = () => {\r\n    return useContext(GlobalContext);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}