{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programmieren_YT\\\\Expense_Tracker\\\\frontend\\\\src\\\\context\\\\globalContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useContext, useState } from \"react\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BASE_URL = \"http://localhost:5000/api/v1/\";\nconst GlobalContext = /*#__PURE__*/React.createContext();\nexport const GlobalProvider = ({\n  children\n}) => {\n  _s();\n  const [incomes, setIncomes] = useState([]);\n  const [expenses, setExpenses] = useState([]);\n  const [error, setError] = useState(null);\n  const addIncome = async income => {\n    try {\n      const response = await axios.post(`${BASE_URL}add-income`, income);\n      setIncomes([...incomes, response.data]); // Assuming response.data contains the newly created income\n      setError(null); // Clear any previous error\n      return response.data; // Return the added income or relevant data\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || \"An error occurred\");\n    }\n  };\n  const getIncomes = async () => {\n    const response = await axios.get(`${BASE_URL}get-incomes`);\n    setIncomes(response.data);\n    console.log();\n  };\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      addIncome,\n      getIncomes,\n      error,\n      setError,\n      incomes,\n      expenses\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n_s(GlobalProvider, \"tEtYkz3TSUkMCKA3FBENwBvPpJ4=\");\n_c = GlobalProvider;\nexport const useGlobalContext = () => {\n  _s2();\n  return useContext(GlobalContext);\n};\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"names":["React","useContext","useState","axios","jsxDEV","_jsxDEV","BASE_URL","GlobalContext","createContext","GlobalProvider","children","_s","incomes","setIncomes","expenses","setExpenses","error","setError","addIncome","income","response","post","data","err","_err$response","_err$response$data","message","getIncomes","get","console","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGlobalContext","_s2","$RefreshReg$"],"sources":["D:/Programmieren_YT/Expense_Tracker/frontend/src/context/globalContext.js"],"sourcesContent":["import React, { useContext, useState } from \"react\";\r\nimport axios from 'axios';\r\n\r\nconst BASE_URL = \"http://localhost:5000/api/v1/\";\r\n\r\nconst GlobalContext = React.createContext();\r\n\r\nexport const GlobalProvider = ({ children }) => {\r\n    const [incomes, setIncomes] = useState([]);\r\n    const [expenses, setExpenses] = useState([]);\r\n    const [error, setError] = useState(null);\r\n\r\n    const addIncome = async (income) => {\r\n        try {\r\n            const response = await axios.post(`${BASE_URL}add-income`, income);\r\n            setIncomes([...incomes, response.data]); // Assuming response.data contains the newly created income\r\n            setError(null); // Clear any previous error\r\n            return response.data; // Return the added income or relevant data\r\n        } catch (err) {\r\n            setError(err.response?.data?.message || \"An error occurred\");\r\n        }\r\n    };\r\n    const getIncomes = async () => {\r\n        const response = await axios.get(`${BASE_URL}get-incomes`)\r\n        setIncomes(response.data)\r\n        console.log()\r\n    \r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <GlobalContext.Provider value={{\r\n            addIncome,\r\n            getIncomes,\r\n            error,\r\n            setError,\r\n            incomes,\r\n            expenses,\r\n        }}>\r\n            {children}\r\n        </GlobalContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useGlobalContext = () => {\r\n    return useContext(GlobalContext);\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AACnD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAQ,GAAG,+BAA+B;AAEhD,MAAMC,aAAa,gBAAGP,KAAK,CAACQ,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMgB,SAAS,GAAG,MAAOC,MAAM,IAAK;IAChC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAAC,GAAGf,QAAQ,YAAY,EAAEa,MAAM,CAAC;MAClEN,UAAU,CAAC,CAAC,GAAGD,OAAO,EAAEQ,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;MACzCL,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;MAChB,OAAOG,QAAQ,CAACE,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOC,GAAG,EAAE;MAAA,IAAAC,aAAA,EAAAC,kBAAA;MACVR,QAAQ,CAAC,EAAAO,aAAA,GAAAD,GAAG,CAACH,QAAQ,cAAAI,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcF,IAAI,cAAAG,kBAAA,uBAAlBA,kBAAA,CAAoBC,OAAO,KAAI,mBAAmB,CAAC;IAChE;EACJ,CAAC;EACD,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC3B,MAAMP,QAAQ,GAAG,MAAMjB,KAAK,CAACyB,GAAG,CAAC,GAAGtB,QAAQ,aAAa,CAAC;IAC1DO,UAAU,CAACO,QAAQ,CAACE,IAAI,CAAC;IACzBO,OAAO,CAACC,GAAG,CAAC,CAAC;EAEjB,CAAC;EAID,oBACIzB,OAAA,CAACE,aAAa,CAACwB,QAAQ;IAACC,KAAK,EAAE;MAC3Bd,SAAS;MACTS,UAAU;MACVX,KAAK;MACLC,QAAQ;MACRL,OAAO;MACPE;IACJ,CAAE;IAAAJ,QAAA,EACGA;EAAQ;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAEjC,CAAC;AAACzB,EAAA,CApCWF,cAAc;AAAA4B,EAAA,GAAd5B,cAAc;AAsC3B,OAAO,MAAM6B,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAClC,OAAOtC,UAAU,CAACM,aAAa,CAAC;AACpC,CAAC;AAACgC,GAAA,CAFWD,gBAAgB;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}