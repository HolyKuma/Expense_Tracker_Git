{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programmieren_YT\\\\Expense_Tracker_YT\\\\frontend\\\\src\\\\Components\\\\Chart\\\\Chart.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Chart as ChartJs, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport styled from 'styled-components';\nimport { useGlobalContext } from '../../context/globalContext';\nimport { dateFormat } from '../../utils/dateFormat';\nimport { months } from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJs.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement);\nfunction Chart() {\n  _s();\n  const {\n    incomes,\n    expenses\n  } = useGlobalContext();\n\n  // Kombiniere alle Datumswerte aus incomes und expenses und sortiere sie\n  const allDates = [...incomes, ...expenses].map(entry => entry.date).sort((a, b) => new Date(a) - new Date(b));\n\n  // Entferne doppelte Datumswerte nach dem Formatieren\n  const uniqueDates = Array.from(new Map(allDates.map(date => [dateFormat(date), date])).keys());\n\n  // Mappe die Income-Daten auf die entsprechende Position\n  const incomeData = uniqueDates.map(date => {\n    // Finde alle Incomes für das aktuelle Datum\n    const incomeEntries = incomes.filter(inc => dateFormat(inc.date) === date);\n\n    // Berechne die Summe der Incomes für dieses Datum\n    const totalIncome = incomeEntries.reduce((sum, income) => sum + income.amount, 0);\n\n    // Rückgabe des Gesamtwerts oder 0, wenn es keine Incomes gibt\n    return totalIncome;\n  });\n\n  // Mappe die Expense-Daten auf die entsprechende Position\n  const expenseData = uniqueDates.map(date => {\n    // Finde alle Expenses für das aktuelle Datum\n    const expenseEntries = expenses.filter(exp => dateFormat(exp.date) === date);\n\n    // Berechne die Summe der Expenses für dieses Datum\n    const totalExpense = expenseEntries.reduce((sum, expense) => sum + expense.amount, 0);\n\n    // Rückgabe des Gesamtwerts oder 0, wenn es keine Expenses gibt\n    return totalExpense;\n  });\n  const data = {\n    // Labels für die x-Achse basierend auf allen einzigartigen Datumswerten\n    labels: uniqueDates,\n    datasets: [{\n      label: 'Income',\n      data: da(months),\n      backgroundColor: 'green',\n      borderColor: 'green',\n      tension: 0.3,\n      fill: false\n    }, {\n      label: 'Expenses',\n      data: expenseData,\n      backgroundColor: 'red',\n      borderColor: 'red',\n      tension: 0.3,\n      fill: false\n    }]\n  };\n  const options = {\n    scales: {\n      x: {\n        type: 'category',\n        // Standard x-Achse, um konsistente Kategorien darzustellen\n        title: {\n          display: true,\n          text: 'Date'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Amount'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ChartStyled, {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n}\n_s(Chart, \"PHep46UhTemPLuSa3MfIkZAuTiE=\", false, function () {\n  return [useGlobalContext];\n});\n_c = Chart;\nconst ChartStyled = styled.div`\n    background: #FCF6F9;\n    border: 2px solid #FFFFFF;\n    box-shadow: 0px 1px 15px rgba(0, 0, 0, 0.06);\n    padding: 1rem;\n    border-radius: 20px;\n    height: 100%;\n`;\n_c2 = ChartStyled;\nexport default Chart;\nvar _c, _c2;\n$RefreshReg$(_c, \"Chart\");\n$RefreshReg$(_c2, \"ChartStyled\");","map":{"version":3,"names":["React","Chart","ChartJs","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","ArcElement","Line","styled","useGlobalContext","dateFormat","months","jsxDEV","_jsxDEV","register","_s","incomes","expenses","allDates","map","entry","date","sort","a","b","Date","uniqueDates","Array","from","Map","keys","incomeData","incomeEntries","filter","inc","totalIncome","reduce","sum","income","amount","expenseData","expenseEntries","exp","totalExpense","expense","data","labels","datasets","label","da","backgroundColor","borderColor","tension","fill","options","scales","x","type","title","display","text","y","ChartStyled","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","div","_c2","$RefreshReg$"],"sources":["D:/Programmieren_YT/Expense_Tracker_YT/frontend/src/Components/Chart/Chart.js"],"sourcesContent":["import React from 'react';\r\nimport {\r\n    Chart as ChartJs,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    ArcElement,\r\n} from 'chart.js';\r\n\r\nimport { Line } from 'react-chartjs-2';\r\nimport styled from 'styled-components';\r\nimport { useGlobalContext } from '../../context/globalContext';\r\nimport { dateFormat } from '../../utils/dateFormat';\r\nimport { months } from 'moment';\r\n\r\nChartJs.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    ArcElement,\r\n);\r\n\r\nfunction Chart() {\r\n    const { incomes, expenses } = useGlobalContext();\r\n\r\n    // Kombiniere alle Datumswerte aus incomes und expenses und sortiere sie\r\n    const allDates = [...incomes, ...expenses]\r\n        .map(entry => entry.date)\r\n        .sort((a, b) => new Date(a) - new Date(b));\r\n\r\n    // Entferne doppelte Datumswerte nach dem Formatieren\r\n    const uniqueDates = Array.from(\r\n        new Map(allDates.map(date => [dateFormat(date), date])).keys()\r\n    );\r\n\r\n    // Mappe die Income-Daten auf die entsprechende Position\r\n    const incomeData = uniqueDates.map(date => {\r\n        // Finde alle Incomes für das aktuelle Datum\r\n        const incomeEntries = incomes.filter(inc => dateFormat(inc.date) === date);\r\n\r\n        // Berechne die Summe der Incomes für dieses Datum\r\n        const totalIncome = incomeEntries.reduce((sum, income) => sum + income.amount, 0);\r\n\r\n        // Rückgabe des Gesamtwerts oder 0, wenn es keine Incomes gibt\r\n        return totalIncome;\r\n    });\r\n\r\n\r\n    // Mappe die Expense-Daten auf die entsprechende Position\r\n    const expenseData = uniqueDates.map(date => {\r\n        // Finde alle Expenses für das aktuelle Datum\r\n        const expenseEntries = expenses.filter(exp => dateFormat(exp.date) === date);\r\n\r\n        // Berechne die Summe der Expenses für dieses Datum\r\n        const totalExpense = expenseEntries.reduce((sum, expense) => sum + expense.amount, 0);\r\n\r\n        // Rückgabe des Gesamtwerts oder 0, wenn es keine Expenses gibt\r\n        return totalExpense;\r\n    });\r\n\r\n\r\n    const data = {\r\n        // Labels für die x-Achse basierend auf allen einzigartigen Datumswerten\r\n        labels: uniqueDates,\r\n        datasets: [\r\n            {\r\n                label: 'Income',\r\n                data: da(months),\r\n                backgroundColor: 'green',\r\n                borderColor: 'green',\r\n                tension: 0.3,\r\n                fill: false,\r\n            },\r\n            {\r\n                label: 'Expenses',\r\n                data: expenseData,\r\n                backgroundColor: 'red',\r\n                borderColor: 'red',\r\n                tension: 0.3,\r\n                fill: false,\r\n            }\r\n        ]\r\n    };\r\n\r\n    const options = {\r\n        scales: {\r\n            x: {\r\n                type: 'category', // Standard x-Achse, um konsistente Kategorien darzustellen\r\n                title: {\r\n                    display: true,\r\n                    text: 'Date',\r\n                },\r\n            },\r\n            y: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Amount',\r\n                },\r\n            },\r\n        },\r\n    };\r\n\r\n    return (\r\n        <ChartStyled>\r\n            <Line data={data} options={options} />\r\n        </ChartStyled>\r\n    );\r\n}\r\n\r\nconst ChartStyled = styled.div`\r\n    background: #FCF6F9;\r\n    border: 2px solid #FFFFFF;\r\n    box-shadow: 0px 1px 15px rgba(0, 0, 0, 0.06);\r\n    padding: 1rem;\r\n    border-radius: 20px;\r\n    height: 100%;\r\n`;\r\n\r\nexport default Chart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}